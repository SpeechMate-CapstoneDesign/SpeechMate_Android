<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChatHistoryState">
    <option name="serializedSessions">
      <map>
        <entry key="89a6e9ce-e1fb-4aaa-b22a-f72a51f65edd" value="{&quot;id&quot;:&quot;89a6e9ce-e1fb-4aaa-b22a-f72a51f65edd&quot;,&quot;name&quot;:&quot;New Chat&quot;,&quot;timestamp&quot;:1756875420782,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\u003crules_context\u003e\n\nRules are extra documentation provided by the user to help the AI understand the codebase.\nUse them if they seem useful to the users most recent query, but do not use them if they seem unrelated.\n\nRule Name: general_rules\nDescription:\nFollow Kotlin coding conventions\nUse nullable types sparingly\n\n\n\u003c/rules_context\u003e\n\n\u003cadditional_data\u003e\nBelow are some potentially helpful/relevant pieces of information for figuring out to respond\n\u003ccurrent_file\u003e\n```kotlin:core/data/src/main/java/com/speech/data/repository/SpeechRepositoryImpl.kt, lines\u003dALL(1-90)\npackage com.speech.data.repository\n\nimport android.content.Context\nimport android.content.Intent\nimport android.util.Log\nimport androidx.core.net.toUri\nimport com.speech.common.util.suspendRunCatching\nimport com.speech.data.util.getExtension\nimport com.speech.data.util.getMimeType\nimport com.speech.domain.model.speech.SpeechConfig\nimport com.speech.domain.repository.SpeechRepository\nimport com.speech.network.source.speech.SpeechDataSource\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport java.io.File\nimport java.io.FileInputStream\nimport javax.inject.Inject\n\nclass SpeechRepositoryImpl @Inject constructor(\n    @ApplicationContext private val context: Context,\n    private val speechDataSource: SpeechDataSource,\n) : SpeechRepository {\n    override suspend fun uploadFromUri(uriString: String, speechConfig: SpeechConfig, duration: Int): Int {\n        val uri \u003d uriString.toUri()\n        val contentResolver \u003d context.contentResolver\n        context.contentResolver.takePersistableUriPermission(\n            uri,\n            Intent.FLAG_GRANT_READ_URI_PERMISSION,\n        )\n\n        val fileExtension \u003d getExtension(contentResolver, uri)\n        val (presignedUrl, key) \u003d speechDataSource.getPresignedUrl(fileExtension.uppercase())\n        val mimeType \u003d when (val type \u003d getMimeType(contentResolver, uri)) {\n            \&quot;audio/x-wav\&quot; -\u003e \&quot;audio/wav\&quot;\n            else -\u003e type\n        }\n\n        return contentResolver.openInputStream(uri)?.use { inputStream -\u003e\n            speechDataSource.uploadSpeechFile(presignedUrl, inputStream, mimeType)\n\n            val speechId \u003d speechDataSource.uploadSpeechCallback(key, duration).speechId\n\n            speechDataSource.updateSpeechConfig(speechId, speechConfig)\n\n            contentResolver.releasePersistableUriPermission(\n                uri,\n                Intent.FLAG_GRANT_READ_URI_PERMISSION,\n            )\n\n            speechId\n        } ?: throw IllegalStateException(\&quot;Could not open input stream from uri: $uri\&quot;)\n    }\n\n    override suspend fun uploadFromPath(filePath: String, speechConfig: SpeechConfig, duration: Int): Int {\n        val file \u003d File(filePath)\n        if (!file.exists()) {\n            throw IllegalStateException(\&quot;File does not exist at path: $filePath\&quot;)\n        }\n\n        val fileExtension \u003d file.extension\n        val (presignedUrl, key) \u003d speechDataSource.getPresignedUrl(fileExtension.uppercase())\n        val mimeType \u003d getMimeType(file)\n\n        return FileInputStream(file).use { inputStream -\u003e\n            speechDataSource.uploadSpeechFile(presignedUrl, inputStream, mimeType)\n\n            val speechId \u003d speechDataSource.uploadSpeechCallback(key, duration).speechId\n\n            speechDataSource.updateSpeechConfig(speechId, speechConfig)\n\n            speechId\n        }\n    }\n\n    override suspend fun getScript(speechId: Int): String \u003d\n        speechDataSource.getSpeechToText(speechId).script\n\n\n    override suspend fun getScriptAnalysis(speechId: Int) \u003d\n        speechDataSource.getTextAnalysis(speechId).analysisResult.toDomain()\n\n\n    override suspend fun getVerbalAnalysis(speechId: Int) {\n\n    }\n\n    override suspend fun getVideoAnalysis(speechId: Int) {\n\n    }\n}\n\n```\n\u003c/current_file\u003e\n\n\n\u003cattached_files\u003e\n\u003cfile_contents\u003e\n```kotlin:core/data/src/main/java/com/speech/data/repository/SpeechRepositoryImpl.kt, lines\u003dALL(1-15)\n    return contentResolver.openInputStream(uri)?.use { inputStream -\u003e\n            speechDataSource.uploadSpeechFile(presignedUrl, inputStream, mimeType)\n\n            val speechId \u003d speechDataSource.uploadSpeechCallback(key, duration).speechId\n\n            speechDataSource.updateSpeechConfig(speechId, speechConfig)\n\n            contentResolver.releasePersistableUriPermission(\n                uri,\n                Intent.FLAG_GRANT_READ_URI_PERMISSION,\n            )\n\n            speechId\n        } ?: throw IllegalStateException(\&quot;Could not open input stream from uri: $uri\&quot;)\n    }\n```\n\u003c/file_contents\u003e\n\n\u003c/attached_files\u003e\n\u003c/additional_data\u003e\n\u003cuser_query\u003e\n@SpeechRepositoryImpl.kt  이거 finally 처럼 uri 권한해제\n\u003c/user_query\u003e&quot;}]}]}" />
      </map>
    </option>
  </component>
</project>